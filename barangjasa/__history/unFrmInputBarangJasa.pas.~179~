unit unFrmInputBarangJasa;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, unFrmTplInput, ExtCtrls, cxGraphics, cxControls, cxLookAndFeels,
  cxLookAndFeelPainters, cxContainer, cxEdit, dxSkinsCore, dxSkinBlack,
  dxSkinBlue, dxSkinCaramel, dxSkinCoffee, dxSkinDarkRoom, dxSkinDarkSide,
  dxSkinFoggy, dxSkinGlassOceans, dxSkiniMaginary, dxSkinLilian,
  dxSkinLiquidSky, dxSkinLondonLiquidSky, dxSkinMcSkin, dxSkinMoneyTwins,
  dxSkinOffice2007Black, dxSkinOffice2007Blue, dxSkinOffice2007Green,
  dxSkinOffice2007Pink, dxSkinOffice2007Silver, dxSkinOffice2010Black,
  dxSkinOffice2010Blue, dxSkinOffice2010Silver, dxSkinPumpkin, dxSkinSeven,
  dxSkinSharp, dxSkinSilver, dxSkinSpringTime, dxSkinStardust, dxSkinSummer2008,
  dxSkinsDefaultPainters, dxSkinValentine, dxSkinXmas2008Blue, cxTextEdit,
  cxLabel, StdCtrls, cxMaskEdit, cxDropDownEdit, cxLookupEdit, cxDBLookupEdit,
  cxDBLookupComboBox, ZDataset, DB, ZAbstractRODataset, cxSpinEdit, cxStyles,
  dxSkinscxPCPainter, cxCustomData, cxFilter, cxData, cxDataStorage,
  cxGridCustomTableView, cxGridTableView, cxGridCustomView, cxClasses,
  cxGridLevel, cxGrid, cxPC, cxCheckBox;

type
  TfrmInputBarangJasa = class(TfrmTplInput)
    cxLabel1: TcxLabel;
    cxtKode: TcxTextEdit;
    cxLabel2: TcxLabel;
    cxtDeskripsi: TcxTextEdit;
    cxLabel3: TcxLabel;
    cxlKategori: TcxLookupComboBox;
    zqrKategori: TZReadOnlyQuery;
    dsKategori: TDataSource;
    Label13: TLabel;
    cxLabel4: TcxLabel;
    cxlSubKategori: TcxLookupComboBox;
    cxLabel5: TcxLabel;
    cxlSatuan: TcxLookupComboBox;
    zqrSubKategori: TZReadOnlyQuery;
    dsSubKategori: TDataSource;
    zqrSatuan: TZReadOnlyQuery;
    dsSatuan: TDataSource;
    cxBrgDet: TcxPageControl;
    cxTabSheet1: TcxTabSheet;
    cxTabSheet2: TcxTabSheet;
    cxGrid1: TcxGrid;
    cxtbSatuan: TcxGridTableView;
    cxColSatuan: TcxGridColumn;
    cxColQty: TcxGridColumn;
    cxColKeterangan: TcxGridColumn;
    cxColID: TcxGridColumn;
    cxGrid1Level1: TcxGridLevel;
    cxTabSheet3: TcxTabSheet;
    cxLabel8: TcxLabel;
    cxSpinEdit2: TcxSpinEdit;
    cxSpinEdit3: TcxSpinEdit;
    cxLabel9: TcxLabel;
    cxLabel10: TcxLabel;
    cxSpinEdit4: TcxSpinEdit;
    cxLabel11: TcxLabel;
    cxSpinEdit5: TcxSpinEdit;
    cxLabel12: TcxLabel;
    cxSpinEdit6: TcxSpinEdit;
    cxLabel13: TcxLabel;
    cxSpinEdit7: TcxSpinEdit;
    cxLabel14: TcxLabel;
    cxSpinEdit8: TcxSpinEdit;
    cxLabel6: TcxLabel;
    cxlTipe: TcxLookupComboBox;
    zqrTipe: TZReadOnlyQuery;
    dsTipe: TDataSource;
    cxChkAktif: TcxCheckBox;
    cxTabSheet4: TcxTabSheet;
    cxLabel7: TcxLabel;
    cxtDimensi: TcxTextEdit;
    cxChkPPN: TcxCheckBox;
    cxLabel15: TcxLabel;
    cxsBeratPerLbr: TcxSpinEdit;
    cxLabel16: TcxLabel;
    cxsStdCekMtr: TcxSpinEdit;
    cxLabel17: TcxLabel;
    cxsJmlIsiPerSlop: TcxSpinEdit;
    cxLabel18: TcxLabel;
    cxsBrtStlPlong: TcxSpinEdit;
    cxLabel19: TcxLabel;
    cxsBrtPerSlop: TcxSpinEdit;
    cxLabel20: TcxLabel;
    cxsJmlSlopPerIkat: TcxSpinEdit;
    cxLabel21: TcxLabel;
    cxsJmlIkatPerKarung: TcxSpinEdit;
    cxLabel22: TcxLabel;
    cxsBrtPerKarung: TcxSpinEdit;
    cxLabel23: TcxLabel;
    cxsStdBrtKantong: TcxSpinEdit;
    cxLabel24: TcxLabel;
    cxsBrtPerKarungPlusKantong: TcxSpinEdit;
    cxLabel25: TcxLabel;
    cxsBrtTali: TcxSpinEdit;
    cxLabel26: TcxLabel;
    cxsBrtKarung: TcxSpinEdit;
    cxLabel27: TcxLabel;
    cxsBrtTotalPerKrg: TcxSpinEdit;
    cxLabel28: TcxLabel;
    cxtWarna: TcxTextEdit;
    cxLabel29: TcxLabel;
    cxsBrtPerIkat: TcxSpinEdit;
    procedure btnSimpanClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure cxtbSatuanDataControllerBeforePost(
      ADataController: TcxCustomDataController);
    procedure cxsBrtPerIkatPropertiesChange(Sender: TObject);
    procedure cxsJmlIkatPerKarungPropertiesChange(Sender: TObject);
    procedure cxsStdBrtKantongPropertiesChange(Sender: TObject);
    procedure cxsBrtTaliPropertiesChange(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmInputBarangJasa: TfrmInputBarangJasa;

implementation

uses unTools, unDM;

{$R *.dfm}

procedure TfrmInputBarangJasa.btnSimpanClick(Sender: TObject);
var
  q, qs, qd: TZQuery;
  i, ID: integer;
begin
  inherited;

  if Trim(cxtKode.Text) = '' then begin
    MsgBox('Mohon isi kode barang.');
    cxtKode.SetFocus;
  end
  else if Trim(cxtDeskripsi.Text) = '' then begin
    MsgBox('Mohon isi deskripsi barang.');
    cxtDeskripsi.SetFocus;
  end
  else if cxlKategori.Text = '' then begin
    MsgBox('Mohon pilih kategori barang.');
    cxlKategori.SetFocus;
  end
  else if cxlTipe.Text = '' then begin
    MsgBox('Mohon pilih tipe barang.');
    cxlTipe.SetFocus;
  end
  else begin
    q := OpenRS('SELECT * FROM tbl_barang WHERE kode = ''%s''',[cxtKode.Text]);

    if Self.Jenis = 'T' then
      q.Insert
    else begin
      q.Edit;
      ID := q.FieldByName('id').AsInteger;
    end;

    q.FieldByName('kode').AsString := Trim(cxtKode.text);
    q.FieldByName('deskripsi').AsString := cxtDeskripsi.Text;
    q.FieldByName('id_kategori').AsInteger := cxlKategori.EditValue;
    q.FieldByName('id_subkategori').AsInteger := cxlSubKategori.EditValue;
    q.FieldByName('id_satuan').AsString := VarToStr(cxlSatuan.EditValue);
    q.FieldByName('id_tipe').AsInteger := cxlTipe.EditValue;
    if Self.Jenis = 'T' then begin
      q.FieldByName('user_input').AsString := Aplikasi.NamaUser;
      q.FieldByName('tgl_input').AsDateTime := Aplikasi.NowServer;
    end
    else begin
      q.FieldByName('user_edit').AsString := Aplikasi.NamaUser;
      q.FieldByName('tgl_edit').AsDateTime := Aplikasi.NowServer;
    end;
    if cxChkAktif.Checked then
      q.FieldByName('f_aktif').AsInteger := 1
    else
      q.FieldByName('f_aktif').AsInteger := 0;
    q.FieldByName('f_ppn').AsInteger := 1;
    q.Post;

    if Self.Jenis = 'T' then
      ID := LastInsertID;

    qd := OpenRS('SELECT * FROM tbl_barang_det_spek WHERE id_ref = %d',[ID]);
    if qd.IsEmpty then
      qd.Insert
    else
      qd.Edit;
    with qd do begin
      FieldByName('dimensi').AsString := cxtDimensi.Text;
      FieldByName('warna').AsString := Trim(cxtWarna.Text);
      FieldByName('brt_per_lbr').AsFloat := cxsBeratPerLbr.Value;
      FieldByName('std_cek_mtr').AsFloat := cxsStdCekMtr.Value;
      FieldByName('isi_per_slop').AsFloat := cxsJmlIsiPerSlop.Value;
      FieldByName('brt_stl_plong').AsFloat := cxsBrtStlPlong.Value;
      FieldByName('brt_per_slop').AsFloat := cxsBrtPerSlop.Value;
      FieldByName('jml_slop_per_ikat').AsFloat := cxsJmlSlopPerIkat.Value;
      FieldByName('brt_per_ikat').AsFloat := cxsBrtPerIkat.Value;
      FieldByName('jml_ikat_per_karung').AsFloat := cxsJmlIkatPerKarung.Value;
      FieldByName('brt_per_karung').AsFloat := cxsBrtPerKarung.Value;
      FieldByName('std_brt_kantong').AsFloat := cxsStdBrtKantong.Value;
      FieldByName('brt_per_karung_kantong').AsFloat := cxsBrtPerKarungPlusKantong.Value;
      FieldByName('brt_tali').AsFloat := cxsBrtTali.Value;
      FieldByName('brt_karung').AsFloat := cxsBrtKarung.Value;
      FieldByName('std_brt_total').AsFloat := cxsBrtTotalPerKrg.Value;
    end;
    qd.Post;
    qd.Close;

    if cxtbSatuan.DataController.RecordCount > 0 then begin
      q := OpenRS('SELECT * FROM tbl_konv_brg WHERE id_barang = %d', [ID]);
      with cxtbSatuan.DataController do begin
        for i := 0 to RecordCount - 1 do begin
          if q.Locate('id_barang;id_satuan',VarArrayOf([ID, Values[i, cxColSatuan.Index]]),[]) then begin
            q.Edit;
          end
          else
            q.Insert;
          q.FieldByName('id_barang').AsInteger := ID;
          q.FieldByName('id_satuan').AsInteger := Values[i, cxColSatuan.Index];
          q.FieldByName('qty').AsFloat := Values[i, cxColQty.Index];
          q.Post;
        end;
      end;
    end;

    MsgBox('Data barang sudah disimpan.');

    if Self.Jenis = 'T' then begin
      Self.Jenis := 'E';
      cxtKode.Enabled := False;
    end;

  end;

end;

procedure TfrmInputBarangJasa.cxsBrtPerIkatPropertiesChange(Sender: TObject);
begin
  inherited;
  try
    cxsBrtPerKarung.Value :=
      cxsBrtPerIkat.Value * cxsJmlIkatPerKarung.Value;
  except

  end;
end;

procedure TfrmInputBarangJasa.cxsBrtTaliPropertiesChange(Sender: TObject);
begin
  inherited;
  try
    cxsBrtTotalPerKrg.Value :=
      cxsBrtPerKarungPlusKantong.Value +
      cxsBrtTali.Value +
      cxsBrtKarung.Value;

  except

  end;
end;

procedure TfrmInputBarangJasa.cxsJmlIkatPerKarungPropertiesChange(
  Sender: TObject);
begin
  inherited;
  try
    cxsBrtPerKarung.Value :=
      cxsBrtPerIkat.Value * cxsJmlIkatPerKarung.Value;
  except

  end;
end;

procedure TfrmInputBarangJasa.cxsStdBrtKantongPropertiesChange(Sender: TObject);
begin
  inherited;
  try
    cxsBrtPerKarungPlusKantong.Value :=
      (cxsStdBrtKantong.Value *
      cxsJmlSlopPerIkat.Value *
      cxsJmlIkatPerKarung.Value) + cxsBrtPerKarung.Value;
  except

  end;
end;

procedure TfrmInputBarangJasa.cxtbSatuanDataControllerBeforePost(
  ADataController: TcxCustomDataController);
var
  i,j: integer;
  v: variant;
begin
  inherited;
  i := ADataController.GetEditingRecordIndex;
  v := ADataController.Values[i, cxColSatuan.Index];

  for j := 0 to ADataController.RecordCount - 1 do begin
    if j <> i then begin
      if v = ADataController.Values[j, cxColSatuan.Index] then begin
        MsgBox('Satuan tersebut sudah ada.');
        ADataController.DeleteRecord(i);
        Break;
      end;
    end;
  end;
end;

procedure TfrmInputBarangJasa.FormCreate(Sender: TObject);
begin
  inherited;
  zqrKategori.Open;
  zqrSubKategori.Open;
  zqrSatuan.Open;
  zqrTipe.Open;
  cxBrgDet.ActivePageIndex := 0;
  cxChkAktif.Checked := True;
end;

procedure TfrmInputBarangJasa.FormShow(Sender: TObject);
var
  q, qd: TZQuery;
  i, ID: integer;
begin
  inherited;
  if Self.Jenis = 'E' then begin
    q := OpenRS('SELECT * FROM tbl_barang WHERE kode = ''%s''',[Self.EditKey]);
    ID := q.FieldByName('id').AsInteger;
    cxtKode.Text := Self.EditKey;
    cxtKode.Enabled := False;
    cxtDeskripsi.Text := q.FieldByName('deskripsi').AsString;
    cxlKategori.EditValue := q.FieldByName('id_kategori').AsString;
    cxlSubKategori.EditValue := q.FieldByName('id_subkategori').AsString;
    if not q.FieldByName('id_satuan').IsNull then
      cxlSatuan.EditValue := q.FieldByName('id_satuan').AsString;
    if q.FieldByName('f_ppn').AsInteger = 1 then
      cxChkPPN.Checked := True
    else
      cxChkPPN.Checked := False;
    q.Close;

    q := OpenRS('SELECT * FROM tbl_konv_brg WHERE id_barang = %d',[ID]);
    while not q.Eof do begin
      with cxtbSatuan.DataController do begin
        i := AppendRecord;
        Values[i, cxColSatuan.Index] := q.FieldByName('id_satuan').AsInteger;
        Values[i, cxColQty.Index] := q.FieldByName('qty').AsFloat;
        Values[i, cxColKeterangan.Index] := q.FieldByName('keterangan').AsString;
      end;
      q.Next;
    end;
    q.Close;

    qd := OpenRS('SELECT * FROM tbl_barang_det_spek WHERE id_ref = %d', [ID]);

    with qd do begin
      cxtDimensi.Text := FieldByName('dimensi').AsString;
      cxtWarna.Text := FieldByName('warna').AsString;
      cxsBeratPerLbr.Value := FieldByName('brt_per_lbr').AsFloat;
      cxsStdCekMtr.Value := FieldByName('std_cek_mtr').AsFloat;
      cxsJmlIsiPerSlop.Value := FieldByName('isi_per_slop').AsFloat;
      cxsBrtStlPlong.Value := FieldByName('brt_stl_plong').AsFloat;
      cxsBrtPerSlop.Value := FieldByName('brt_per_slop').AsFloat;
      cxsJmlSlopPerIkat.Value := FieldByName('jml_slop_per_ikat').AsFloat;
      cxsBrtPerIkat.Value := FieldByName('brt_per_ikat').AsFloat;
      cxsJmlIkatPerKarung.Value := FieldByName('jml_ikat_per_karung').AsFloat;
      cxsBrtPerKarung.Value := FieldByName('brt_per_karung').AsFloat;
      cxsStdBrtKantong.Value := FieldByName('std_brt_kantong').AsFloat;
      cxsBrtPerKarungPlusKantong.Value := FieldByName('brt_per_karung_kantong').AsFloat;
      cxsBrtTali.Value := FieldByName('brt_tali').AsFloat;
      cxsBrtKarung.Value := FieldByName('brt_karung').AsFloat;
      cxsBrtTotalPerKrg.Value := FieldByName('std_brt_total').AsFloat;
    end;
    qd.Close;
                                                    
  end;
end;

end.
