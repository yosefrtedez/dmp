unit unFrmInputBarangMasuk;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, unFrmTplInput, StdCtrls, ExtCtrls, cxGraphics, cxControls,
  cxLookAndFeels, cxLookAndFeelPainters, cxContainer, cxEdit, dxSkinsCore,
  dxSkinBlack, dxSkinBlue, dxSkinCaramel, dxSkinCoffee, dxSkinDarkRoom,
  dxSkinDarkSide, dxSkinFoggy, dxSkinGlassOceans, dxSkiniMaginary, dxSkinLilian,
  dxSkinLiquidSky, dxSkinLondonLiquidSky, dxSkinMcSkin, dxSkinMoneyTwins,
  dxSkinOffice2007Black, dxSkinOffice2007Blue, dxSkinOffice2007Green,
  dxSkinOffice2007Pink, dxSkinOffice2007Silver, dxSkinOffice2010Black,
  dxSkinOffice2010Blue, dxSkinOffice2010Silver, dxSkinPumpkin, dxSkinSeven,
  dxSkinSharp, dxSkinSilver, dxSkinSpringTime, dxSkinStardust, dxSkinSummer2008,
  dxSkinsDefaultPainters, dxSkinValentine, dxSkinXmas2008Blue, DB,
  ZAbstractRODataset, ZDataset, cxCheckBox, cxTextEdit, cxDropDownEdit,
  cxCalendar, cxMaskEdit, cxLookupEdit, cxDBLookupEdit, cxDBLookupComboBox,
  cxLabel, cxStyles, dxSkinscxPCPainter, cxCustomData, cxFilter, cxData,
  cxDataStorage, cxSpinEdit, cxGridLevel, cxGridCustomTableView,
  cxGridTableView, cxClasses, cxGridCustomView, cxGrid, Spin;

type
  TfrmInputBarangMasuk = class(TfrmTplInput)
    Label13: TLabel;
    cxlbl1: TcxLabel;
    cxlbl4: TcxLabel;
    cxdTglDatang: TcxDateEdit;
    cxtNoBukti: TcxTextEdit;
    cxlbl14: TcxLabel;
    cxtKeterangan: TcxTextEdit;
    cxgrdPP: TcxGrid;
    cxtbBarangMasuk: TcxGridTableView;
    cxColNo: TcxGridColumn;
    cxColKodeBrg: TcxGridColumn;
    cxColDeskripsi: TcxGridColumn;
    cxColQty: TcxGridColumn;
    cxColSatuan: TcxGridColumn;
    cxColKeterangan: TcxGridColumn;
    cxColIdSatuan: TcxGridColumn;
    cxgrdlvl1Grid1Level1: TcxGridLevel;
    zqrBarang: TZReadOnlyQuery;
    dsBarang: TDataSource;
    cxColGudang: TcxGridColumn;
    zqrGudang: TZReadOnlyQuery;
    dsGudang: TDataSource;
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure cxColNoGetDisplayText(Sender: TcxCustomGridTableItem;
      ARecord: TcxCustomGridRecord; var AText: string);
    procedure btnSimpanClick(Sender: TObject);
    procedure cxtbBarangMasukDataControllerBeforePost(
      ADataController: TcxCustomDataController);
    procedure cxtbBarangMasukDataControllerRecordChanged(
      ADataController: TcxCustomDataController; ARecordIndex,
      AItemIndex: Integer);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmInputBarangMasuk: TfrmInputBarangMasuk;

implementation

uses unDM, unTools;

{$R *.dfm}

procedure TfrmInputBarangMasuk.btnSimpanClick(Sender: TObject);
var
  q, qh, qd, qSatuan, qhst, qBrg, qBrgDet, qGdg : TZQuery;
  sNoBukti : string;
  i, id : integer;
  f0: Boolean;

begin
  inherited;

  if (cxtbBarangMasuk.DataController.EditState = [dceInsert, dceModified]) or
    (cxtbBarangMasuk.DataController.EditState = [dceEdit, dceModified]) then begin
    MsgBox('Mohon selesaikan pengeditan detail sebelum disimpan.');
    Abort;
  end;

  with cxtbBarangMasuk.DataController do begin
    if RecordCount = 0 then begin
      MsgBox('Detail transaksi masih kosong.');
      Abort;
    end;

    if Self.Jenis = 'T' then begin
      sNoBukti := GetLastFak('brg-masuk');
      UpdateFaktur(Copy(sNoBukti,1,7));
    end
    else begin
      sNoBukti := cxtNoBukti.text;
    end;

    try
      dm.zConn.StartTransaction;

      qh := OpenRS('SELECT * FROM tbl_trsmasuk_head WHERE no_bukti = ''%s''',[sNoBukti]);
      if Self.Jenis = 'T' then begin
        qh.Insert;
      end
      else begin
        qh.Edit;
        ID := qh.FieldByName('id').AsInteger;
        dm.zConn.ExecuteDirect(Format('DELETE FROM tbl_trsmasuk_det WHERE id_ref = %s',[Self.EditKey]));
      end;

      qh.FieldByName('no_bukti').AsString := sNoBukti;
      qh.FieldByName('keterangan').AsString := cxtKeterangan.Text;
      qh.FieldByName('tanggal').AsDateTime := Aplikasi.Tanggal;
      qh.FieldByName('user').AsString := Aplikasi.NamaUser;
      qh.FieldByName('user_dept').AsString := Aplikasi.UserDept;
      qh.FieldByName('tgl_input').AsDateTime := Aplikasi.Tanggal;
      qh.Post;

      if Self.Jenis = 'T' then  ID := LastInsertID;

      qd := OpenRS('SELECT * FROM tbl_trsmasuk_det WHERE no_bukti = ''%s''',[sNoBukti]);
      qhst := OpenRS('SELECT * FROM tbl_history WHERE no_bukti = ''%s''',[sNoBukti]);

      with cxtbBarangMasuk.DataController do begin
        for i := 0 to RecordCount - 1 do begin
          qd.Insert;
          if Self.Jenis = 'T' then begin
            qd.FieldByName('id_ref').AsInteger := ID;
          end else begin
            qd.FieldByName('id_ref').AsString := qh.FieldByName('id').AsString;
          end;
          qd.FieldByName('no_bukti').AsString := sNoBukti;
          qd.FieldByName('kode_brg').AsString := Values[i, cxColKodeBrg.Index];
          qd.FieldByName('id_brg').AsInteger := Values[i, cxColDeskripsi.Index];
          qd.FieldByName('qty').AsFloat := Values[i, cxColQty.Index];
          qd.FieldByName('id_satuan').AsString := Values[i, cxColIdSatuan.Index];
          qd.FieldByName('id_gdg').AsString := Values[i, cxColGudang.Index];
          if VarIsNull(Values[i, cxColKeterangan.index]) = True then begin
            qd.FieldByName('keterangan').AsString := '';
          end else begin
            qd.FieldByName('keterangan').AsString := Values[i, cxColKeterangan.Index];
          end;
          qd.Post;

          with qhst do begin
            Insert;
            FieldByName('no_bukti').AsString := sNoBukti;
            FieldByName('tanggal').AsDateTime := Aplikasi.TanggalServer;
            FieldByName('kode_brg').AsString := Values[i, cxColKodeBrg.Index];
            FieldByName('id_brg').AsInteger := Values[i, cxColDeskripsi.Index];
            FieldByName('qty').AsFloat := Values[i, cxColQty.Index];
            FieldByName('tipe').AsString := 'i';
            FieldByName('id_satuan').AsInteger := Values[i, cxColIdSatuan.Index];
            FieldByname('id_gdg').AsInteger := Values[i, cxColGudang.Index];
            FieldByName('keterangan').AsString := Values[i, cxColKeterangan.Index];
            FieldByName('tgl_input').AsDateTime := Aplikasi.NowServer;
            Post;
          end;

          qbrg := OpenRS('SELECT * FROM tbl_barang WHERE id = %s',[Values[i, cxColDeskripsi.Index]]);
          qbrg.Edit;
          qbrg.FieldByName('stok').AsFloat := qbrg.FieldByName('stok').AsFloat + Values[i, cxColQty.Index];
          qbrg.Post;
          qbrg.Close;

          qbrg := OpenRS('SELECT * FROM tbl_barang_det WHERE id_brg = %s AND id_gdg = %s',
            [Values[i, cxColDeskripsi.Index], Values[i, cxColGudang.Index]]);

          if qbrg.IsEmpty then begin
            qbrg.Insert;
            qbrg.FieldByName('id_brg').AsInteger := Values[i, cxColDeskripsi.Index];
            qbrg.FieldByName('kode_brg').AsString := Values[i, cxColKodeBrg.Index];
            qbrg.FieldByName('id_gdg').AsInteger := Values[i, cxColGudang.Index];
          end
          else
            qbrg.Edit;
          qbrg.FieldByName('stok').AsFloat := qbrg.FieldByName('stok').AsFloat + Values[i, cxColQty.Index];
          qbrg.Post;
          qbrg.Close;

        end;
      end;
      dm.zConn.Commit;
      qh.Close;
      qd.Close;
      Self.Jenis := '';
      MsgBox('Transaksi barang keluar sudah disimpan dengan No. Bukti : ' + sNoBukti);
      btnBatalClick(nil);
    except
      on E: Exception do begin
        dm.zConn.Rollback;
        MsgBox('Error: ' + E.Message);
      end;
    end;
  end;


  {
  if (cxtbBarangMasuk.DataController.EditState = [dceInsert, dceModified]) or (cxtbBarangMasuk.DataController.EditState = [dceEdit, dceModified]) then begin
    MsgBox('Mohon selesaikan pengeditan detail sebelum disimpan.');
    Abort;
  end;

  with cxtbBarangMasuk.DataController do begin
    if RecordCount = 0 then begin
      MsgBox('Detail transaksi masih kosong.');
      Abort;
    end;

    if Self.Jenis = 'T' then begin
      sNoBukti := GetLastFak('brg_in');
      UpdateFaktur(Copy(sNoBukti,1,7));
    end
    else begin
      sNoBukti := cxtNoBukti.text;
    end;

    try
      dm.zConn.StartTransaction;

      qh := OpenRS('SELECT * FROM tbl_trsmasuk_head WHERE no_bukti = ''%s''',[sNoBukti]);
      if Self.Jenis = 'T' then begin
        qh.Insert;
      end
      else begin
        qh.Edit;
        ID := qh.FieldByName('id').AsInteger;
        dm.zConn.ExecuteDirect(Format('DELETE FROM tbl_trsmasuk_det WHERE id_ref = %s',[Self.EditKey]));
      end;

      qh.FieldByName('no_bukti').AsString := sNoBukti;
      qh.FieldByName('tanggal').AsDateTime := Aplikasi.TanggalServer;
      qh.FieldByName('keterangan').AsString := cxtKeterangan.Text;
      qh.FieldByName('tanggal').AsDateTime := Aplikasi.Tanggal;
      qh.FieldByName('user').AsString := Aplikasi.NamaUser;
      qh.FieldByName('user_dept').AsString := Aplikasi.UserDept;
      qh.FieldByName('tgl_input').AsDateTime := Aplikasi.TanggalServer;
      qh.Post;

      if Self.Jenis = 'T' then  ID := LastInsertID;
      qHist := OpenRS('select * from tbl_history where no_bukti = ''%s''',[sNobukti]);
      qd := OpenRS('SELECT * FROM tbl_trsmasuk_det WHERE no_bukti = ''%s''',[sNoBukti]);

      with cxtbBarangMasuk.DataController do begin
        for i := 0 to RecordCount - 1 do begin
          qd.Insert;
          if Self.Jenis = 'T' then begin
            qd.FieldByName('id_ref').AsInteger := ID;
          end else begin
            qd.FieldByName('id_ref').AsString := qh.FieldByName('id').AsString;
          end;

          qd.FieldByName('no_bukti').AsString := sNoBukti;
          qd.FieldByName('kode_brg').AsString := Values[i, cxColKodeBrg.Index];
          qd.FieldByName('id_brg').AsInteger := Values[i, cxColDeskripsi.Index];
          qd.FieldByName('qty').AsFloat := Values[i, cxColQty.Index];
          qd.FieldByName('satuan').AsString := Values[i, cxColSatuan.Index];
          qd.FieldByName('id_satuan').AsInteger := Values[i, cxColIdSatuan.Index];
          qd.FieldByName('kode_gdg').AsString := Values[i, cxColGudang.Index];
          if VarIsNull(Values[i, cxColKeterangan.index]) = True then begin
            qd.FieldByName('keterangan').AsString := '';
          end else begin
            qd.FieldByName('keterangan').AsString := Values[i, cxColKeterangan.Index];
          end;
          qd.Post;

          qHist.Insert;
          qHist.FieldByName('no_bukti').AsString := sNoBukti;
          qHist.FieldByName('tanggal').AsDateTime := Aplikasi.Tanggal;
          qHist.FieldByName('kode_brg').AsString := Values[i, cxColKodeBrg.Index];
          qHist.FieldByName('id_brg').AsString := Values[i, cxColDeskripsi.Index];
          qHist.FieldByName('tipe').AsString := 'i';
          qHist.FieldByName('qty').AsFloat := Values[i, cxColQty.Index];
          qHist.FieldByName('satuan').AsString := Values[i, cxColSatuan.Index];
          qHist.FieldByName('id_satuan').AsString := Values[i, cxColIdSatuan.Index];
          qHist.FieldByName('id_gdg').AsInteger := Values[i, cxColGudang.Index];
          qHist.FieldByName('keterangan').AsString := VarToStr(Values[i, cxColKeterangan.Index]);
          qHist.FieldByName('user').AsString := Aplikasi.NamaUser;
          qHist.FieldByName('user_dept').AsString := Aplikasi.UserDept;
          qHist.Post;

          qBrg := OpenRS('select * from tbl_barang where id = %s',[Values[i, cxColDeskripsi.Index]]);
          qBrg.Edit;
          qBrg.FieldByName('stok').AsFloat := qBrg.FieldByName('stok').AsFloat + Values[i, cxColQty.Index];
          qBrg.Post;

          qBrgDet := OpenRS('select * from tbl_barang_det where id_brg = %s and id_gdg = %s',
            [Values[i, cxColDeskripsi.Index], Values[i, cxColGudang.Index]]);
          if not qBrgDet.Eof then begin
            qBrgDet.Edit;
            qBrgDet.FieldByName('stok').AsFloat := qBrgDet.FieldByName('stok').AsFloat + Values[i, cxColQty.Index];
            qBrgDet.Post;
          end;
          qHist.Close;
          qGdg.Close;
          qBrg.Close;
          qBrgDet.Close;

        end;
      end;
      dm.zConn.Commit;
      qh.Close;
      qd.Close;
      Self.Jenis := '';
      MsgBox('Transaksi barang masuk sudah disimpan dengan No. Bukti : ' + sNoBukti);
      btnBatalClick(nil);
    except
      on E: Exception do begin
        dm.zConn.Rollback;
        MsgBox('Error: ' + E.Message);
      end;
    end;
  end;
  }
end;

procedure TfrmInputBarangMasuk.cxColNoGetDisplayText(
  Sender: TcxCustomGridTableItem; ARecord: TcxCustomGridRecord;
  var AText: string);
var
  row : Integer;
begin
  inherited;
  Row := Sender.GridView.DataController.GetRowIndexByRecordIndex(ARecord.RecordIndex, False);
  AText := IntToStr(Row+1);
end;


procedure TfrmInputBarangMasuk.cxtbBarangMasukDataControllerBeforePost(
  ADataController: TcxCustomDataController);
var
  i,j,k: integer;
  v: variant;
begin
  inherited;
  i := ADataController.FocusedRowIndex;
  k := ADataController.GetEditingRecordIndex;
  v := ADataController.Values[i, cxColKodeBrg.Index];

  for j := 0 to ADataController.RecordCount - 1 do begin
    if j <> k then begin
      if v = ADataController.Values[j, cxColKodeBrg.Index] then begin
        MsgBox('Item tersebut sudah ada.');
        ADataController.DeleteRecord(i);
        Abort
      end;
    end;
  end;

  if (VarIsNull(ADataController.Values[i, cxColKodeBrg.Index])) or
      (Trim(ADataController.Values[i, cxColKodeBrg.Index]) = '')  then begin
      MsgBox('Kode barang harus diisi.');
      Abort;
  end;

  if (VarIsNull(ADataController.Values[i, cxColGudang.Index])) or
      (Trim(ADataController.Values[i, cxColGudang.Index]) = '')  then begin
      MsgBox('Kode gudang harus diisi.');
      Abort;
  end;

  if ADataController.Values[i, cxColQty.Index] <= 0 then begin
    MsgBox('Qty tidak boleh minus');
    Abort;
  end;

end;



procedure TfrmInputBarangMasuk.cxtbBarangMasukDataControllerRecordChanged(
  ADataController: TcxCustomDataController; ARecordIndex, AItemIndex: Integer);
var
  q: TZQuery;
  t, t1, t2, t3 : Real;
  i: Integer ;
begin
  inherited;

  if AItemIndex = cxColDeskripsi.Index then begin
    try
      cxtbBarangMasuk.BeginUpdate;
      q := OpenRS('SELECT a.*, b.satuan satuan2 FROM tbl_barang a LEFT JOIN tbl_satuan b ON a.id_satuan = b.id WHERE a.id = %s',
      [ADataController.Values[ARecordIndex, cxColDeskripsi.Index]]);
      ADataController.Values[ARecordIndex, cxColKodeBrg.Index] :=  q.FieldByName('kode').AsString;
      ADataController.Values[ARecordIndex, cxColSatuan.Index] := q.FieldByName('satuan2').AsString;
      q.Close;
    finally
      cxtbBarangMasuk.EndUpdate
    end;
  end;

end;



procedure TfrmInputBarangMasuk.FormCreate(Sender: TObject);
begin
  inherited;
  cxdTglDatang.Date := Aplikasi.Tanggal;
  zqrBarang.Open;
  zqrGudang.Open;
end;

procedure TfrmInputBarangMasuk.FormShow(Sender: TObject);
  var
   q,z : TZQuery;
   i, nomer: integer;
   sNoTrs : string;
begin
  inherited;
  if Self.Jenis = 'T' then begin
    sNoTrs := GetLastFak('brg_in');
    cxtNoBukti.Text := sNoTrs;
    cxdTglDatang.Date := Aplikasi.Tanggal;

  end
  else if Self.Jenis = 'E' then begin
    q := OpenRS('SELECT * FROM tbl_trsmasuk_head WHERE id = %s',[Self.EditKey]);
    cxtNoBukti.Text := q.FieldByName('no_bukti').AsString;
    cxdTglDatang.Date := q.FieldByName('tanggal').AsDateTime;
    cxtKeterangan.Text := q.FieldByName('keterangan').AsString;
    q.Close;
    z := OpenRS('SELECT a.id, a.id_ref, a.no_bukti, a.kode_brg, a.kode_gdg, a.id_brg, a.id_satuan, a.keterangan, b.deskripsi, c.satuan, a.qty, a.qty_baik, a.qty_afkir, a.qty_retur, a.keterangan,' +
          'a.no_so, a.no_spk, a.nO_spmb' +
          'FROM tbl_trsmasuk_det a' +
          'LEFT JOIN tbl_barang b ON a.kode_brg = b.kode' +
          'LEFT JOIN tbl_satuan c ON a.id_brg = c.id' +
          'LEFT JOIN tbl_gudang d ON d.id = a.kode_gdg' +
          'WHERE id_ref = %s',[Self.EditKey]);
    nomer := 1;

    cxtbBarangMasuk.DataController.OnRecordChanged := nil;
    while not z.Eof do begin
      with cxtbBarangMasuk.DataController do begin
        i := AppendRecord;
        Values[i, cxColNo.Index] := nomer;
        Values[i, cxColKodeBrg.Index] := z.FieldByName('kode_brg').AsString;
        Values[i, cxColDeskripsi.Index] := z.FieldByName('id_brg').AsString;
        Values[i, cxColQty.Index] := z.FieldByName('qty').AsFloat;
        Values[i, cxColSatuan.Index] := z.FieldByName('satuan').AsString;
        Values[i, cxColGudang.Index] := z.FieldByName('kode_gdg').AsString;
        Values[i, cxColIdSatuan.Index] := z.FieldByname('id_satuan').AsInteger;
        Values[i, cxColKeterangan.Index] := z.FieldByname('keterangan').AsInteger;
        nomer := nomer +1;
      end;
      z.Next;
    end;
    z.Close;
    cxtbBarangMasuk.DataController.OnRecordChanged := Self.cxtbBarangMasukDataControllerRecordChanged;

  end;
end;

end.
