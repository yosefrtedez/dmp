unit unFrmInputHasilProduksi;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, unFrmTplInput, StdCtrls, ExtCtrls, cxGraphics, cxControls,
  cxLookAndFeels, cxLookAndFeelPainters, cxContainer, cxEdit, dxSkinsCore,
  dxSkinBlack, dxSkinBlue, dxSkinCaramel, dxSkinCoffee, dxSkinDarkRoom,
  dxSkinDarkSide, dxSkinFoggy, dxSkinGlassOceans, dxSkiniMaginary, dxSkinLilian,
  dxSkinLiquidSky, dxSkinLondonLiquidSky, dxSkinMcSkin, dxSkinMoneyTwins,
  dxSkinOffice2007Black, dxSkinOffice2007Blue, dxSkinOffice2007Green,
  dxSkinOffice2007Pink, dxSkinOffice2007Silver, dxSkinOffice2010Black,
  dxSkinOffice2010Blue, dxSkinOffice2010Silver, dxSkinPumpkin, dxSkinSeven,
  dxSkinSharp, dxSkinSilver, dxSkinSpringTime, dxSkinStardust, dxSkinSummer2008,
  dxSkinsDefaultPainters, dxSkinValentine, dxSkinXmas2008Blue, cxStyles,
  dxSkinscxPCPainter, cxCustomData, cxFilter, cxData, cxDataStorage, DB,
  cxDBData, cxTextEdit, cxSpinEdit, cxGridLevel, cxGridCustomTableView,
  cxGridTableView, cxGridDBTableView, cxClasses, cxGridCustomView, cxGrid,
  cxMaskEdit, cxDropDownEdit, cxCalendar, cxLabel, ZAbstractRODataset, ZDataset,
  cxCheckBox, cxDBLookupComboBox, cxMemo;

type
  TfrmInputHasilProduksi = class(TfrmTplInput)
    Panel3: TPanel;
    cxLabel1: TcxLabel;
    cxdTgl1: TcxDateEdit;
    cxdTgl2: TcxDateEdit;
    cxLabel2: TcxLabel;
    btnProses: TButton;
    cxGrid1: TcxGrid;
    cxtbSPK: TcxGridDBTableView;
    cxtbSPKid: TcxGridDBColumn;
    cxtbSPKno_spk: TcxGridDBColumn;
    cxtbSPKtanggal: TcxGridDBColumn;
    cxtbSPKno_mo: TcxGridDBColumn;
    cxtbSPKno_so: TcxGridDBColumn;
    cxtbSPKdeskripsi: TcxGridDBColumn;
    cxGrid1Level1: TcxGridLevel;
    Panel4: TPanel;
    Label13: TLabel;
    dsSPK: TDataSource;
    zqrSPK: TZReadOnlyQuery;
    cxtbSPKColumn1: TcxGridDBColumn;
    cxtbSPKColumn2: TcxGridDBColumn;
    dsMesin: TDataSource;
    zqrMesin: TZReadOnlyQuery;
    cxGrid3: TcxGrid;
    cxGridLevel2: TcxGridLevel;
    cxtbHslProd: TcxGridTableView;
    cxtbHslProdColumn1: TcxGridColumn;
    cxColJam1: TcxGridColumn;
    cxColJam2: TcxGridColumn;
    cxColShift: TcxGridColumn;
    cxColMesin: TcxGridColumn;
    cxColOperator: TcxGridColumn;
    cxColQtyProd: TcxGridColumn;
    cxColSatBJ: TcxGridColumn;
    cxColGdgBJ: TcxGridColumn;
    cxColQtyAfal: TcxGridColumn;
    cxColSatAfal: TcxGridColumn;
    cxColGdgAfal: TcxGridColumn;
    cxColStatus: TcxGridColumn;
    cxColIdSat: TcxGridColumn;
    cxColIdGdg: TcxGridColumn;
    dsSatuan: TDataSource;
    zqrSatuan: TZReadOnlyQuery;
    dsGdg: TDataSource;
    zqrGdg: TZReadOnlyQuery;
    cxtbSPKColumn3: TcxGridDBColumn;
    cxtbSPKColumn4: TcxGridDBColumn;
    procedure btnProsesClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure cxtbHslProdDataControllerAfterPost(
      ADataController: TcxCustomDataController);
    procedure cxtbHslProdDataControllerNewRecord(
      ADataController: TcxCustomDataController; ARecordIndex: Integer);
    procedure cxtbSPKFocusedRecordChanged(Sender: TcxCustomGridTableView;
      APrevFocusedRecord, AFocusedRecord: TcxCustomGridRecord;
      ANewItemRecordFocusingChanged: Boolean);
    procedure cxtbHslProdDataControllerBeforePost(
      ADataController: TcxCustomDataController);
    procedure cxtbHslProdDataControllerBeforeDelete(
      ADataController: TcxCustomDataController; ARecordIndex: Integer);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frmInputHasilProduksi: TfrmInputHasilProduksi;

implementation

uses unDM, unTools;

{$R *.dfm}

procedure TfrmInputHasilProduksi.btnProsesClick(Sender: TObject);
begin
  inherited;
  with zqrSPK do begin
    Close;
    ParamByName('tgl1').AsDate := cxdTgl1.Date;
    ParamByName('tgl2').AsDate := cxdTgl2.Date;
    Open;
  end;
end;

procedure TfrmInputHasilProduksi.cxtbHslProdDataControllerAfterPost(
  ADataController: TcxCustomDataController);
var
  q, qh: TZQuery;
  i, j: integer;
  sNoBukti: string;
  dt: TDateTime;
  yy, mm, dd : Word;
begin
  inherited;
  try
    Screen.Cursor := crSQLWait;

    dm.zConn.StartTransaction;

    i := ADataController.GetFocusedRecordIndex;
    j := cxtbSPK.DataController.GetFocusedRecordIndex;

    sNoBukti := GetLastFak('hasil-produksi');
    UpdateFaktur(Copy(sNoBukti,1,8));
    q := OpenRS('SELECT * FROM tbl_hsl_prd WHERE id_spk = %s',
      [zqrSPK.FieldByName('id').AsString]);
    q.Insert;
    q.FieldByName('id_spk').AsInteger := zqrSPK.FieldByName('id').AsInteger;
    q.FieldByName('no_bukti').AsString := sNoBukti;
    q.FieldByName('no_spk').AsString := sNoBukti;
    q.FieldByName('jam1').AsDateTime := ADataController.Values[i, cxColJam1.Index];
    q.FieldByName('jam2').AsDateTime := ADataController.Values[i, cxColJam2.Index];
    q.FieldByName('shift').AsInteger := ADataController.Values[i, cxColShift.Index];
    q.FieldByName('id_mesin').AsInteger := ADataController.Values[i, cxColMesin.Index];
    q.FieldByName('operator').AsString := ADataController.Values[i, cxColOperator.Index];
    q.FieldByName('qty_prod').AsFloat := ADataController.Values[i, cxColQtyProd.Index];
    q.FieldByName('id_satuan').AsInteger := zqrSPK.FieldByName('id_satuan').AsInteger;
    q.FieldByName('id_gdg').AsInteger := ADataController.Values[i, cxColGdgBJ.Index];
    ADataController.Values[i, cxColStatus.Index] := 1;
    q.Post;
    q.Close;

    qh := OpenRS('SELECT * FROM tbl_history WHERE no_bukti = ''%s''',[sNoBukti]);
    qh.Insert;
    qh.FieldByName('no_bukti').AsString := sNobukti;
    
    dt := ADataController.Values[i, cxColJam1.Index];
    DecodeDate(dt, yy, mm, dd);
    dt := EncodeDate(yy, mm, dd);
    
    qh.FieldByName('tanggal').AsString :=  ADataController.Values[i, cxColJam1.Index];
    qh.FieldByName('kode_brg').AsString := zqrSPK.FieldByName('kode_brg').AsString;
    qh.FieldByName('id_brg').AsInteger := zqrSPK.FieldByName('id_brg').AsInteger;
    qh.FieldByName('qty').AsFloat := ADataController.Values[i, cxColQtyProd.Index];
    qh.FieldByName('id_satuan').AsInteger := zqrSPK.FieldByName('id_satuan').AsInteger; 
    qh.FieldByName('id_gdg').AsInteger := ADataController.Values[i, cxColGdgBJ.Index];
    qh.FieldByName('id_spk').AsInteger := zqrSPK.FieldByName('id').AsInteger;
    qh.FieldByName('id_so').AsInteger := zqrSPK.FieldByName('id_so').AsInteger;
    qh.FieldbyName('tipe').AsString := 'i';
    qh.FieldbyName('user').AsString := Aplikasi.NamaUser;
    qh.FieldByName('user_dept').AsString := Aplikasi.UserDept;
    qh.Post;
    qh.Close;
    
    dm.zConn.Commit;

    {
    // update qty pengambilan
    q := OpenRS('SELECT SUM(qty) qty FROM tbl_trspengambilanbb WHERE id_spk = %s AND id_brg = %s',
      [zqrSPK.FieldByName('id').AsString, cxtbBOM.DataController.Values[j, cxColIdBrg.Index]]);
    cxtbBOM.DataController.Values[j, cxColDiambil.Index] := q.FieldByname('qty').AsFloat;
    q.Close;
    }

    Screen.Cursor := crDefault;
  except
    on E: Exception do begin
      dm.zConn.Rollback;
      Screen.Cursor := crDefault;
      MsgBox('Error: ' + E.Message);
    end;
  end;

end;

procedure TfrmInputHasilProduksi.cxtbHslProdDataControllerBeforeDelete(
  ADataController: TcxCustomDataController; ARecordIndex: Integer);
begin
  inherited;
  if ADataController.Values[ARecordIndex, cxColStatus.Index] = 1 then Abort;
end;

procedure TfrmInputHasilProduksi.cxtbHslProdDataControllerBeforePost(
  ADataController: TcxCustomDataController);
var
  i: integer;
  berr: boolean;
begin
  inherited;
  i := ADataController.GetFocusedRecordIndex;

  if ADataController.Values[i, cxColStatus.Index] = 1 then Abort;

end;
procedure TfrmInputHasilProduksi.cxtbHslProdDataControllerNewRecord(
  ADataController: TcxCustomDataController; ARecordIndex: Integer);
begin
  inherited;
  ADataController.Values[ARecordIndex, cxColGdgBJ.Index] := Aplikasi.GdgBJ;
  ADataController.Values[ARecordIndex, cxColSatBJ.Index] := zqrSPK.FieldByName('id_satuan').AsInteger;
end;

procedure TfrmInputHasilProduksi.cxtbSPKFocusedRecordChanged(
  Sender: TcxCustomGridTableView; APrevFocusedRecord,
  AFocusedRecord: TcxCustomGridRecord; ANewItemRecordFocusingChanged: Boolean);
var
  q: TZQuery;
  i: integer;
begin
  inherited;
  try
  with cxtbHslProd.DataController do begin
    RecordCount := 0;
    q := OpenRS('SELECT a.*, b.satuan satuan2 ' +
      'FROM tbl_hsl_prd a ' +
      'LEFT JOIN tbl_satuan b ON b.id = a.id_satuan WHERE id_spk = %d',
      [zqrSPK.FieldByName('id').AsInteger]);
    while not q.Eof do begin
      i := AppendRecord;
      Values[i, cxColJam1.Index] := q.FieldByName('jam1').AsDateTime;
      Values[i, cxColJam2.Index] := q.FieldByName('jam2').AsDateTime;
      Values[i, cxColShift.Index] := q.FieldByName('shift').AsInteger;
      Values[i, cxColMesin.Index] := q.FieldByName('id_mesin').AsInteger;
      Values[i, cxColOperator.Index] := q.FieldByName('operator').AsString;
      Values[i, cxColQtyProd.Index] := q.FieldByName('qty_prod').AsFloat;
      Values[i, cxColSatBJ.Index] := zqrSPK.FieldByName('id_satuan').AsInteger;
      Values[i, cxColGdgBJ.Index] := q.FieldByName('id_gdg').AsInteger;
      Values[i, cxColStatus.Index] := 1;
      q.Next;
    end;
    q.Close;
  end;
  finally

  end;
end;

procedure TfrmInputHasilProduksi.FormCreate(Sender: TObject);
begin
  inherited;
  zqrSatuan.Open;
  zqrMesin.Open;
  zqrGdg.Open;
  cxdTgl1.Date := unTools.FDOM(Aplikasi.TanggalServer);
  cxdTgl2.Date := unTools.LDOM(Aplikasi.TanggalServer);
end;

end.
