
unit unAplikasi;

interface

uses SysUtils, ZDataset, Controls, OleCtrls, comobj, Classes, ADODB, Windows;

type
  TAplikasi = class(TObject)
    crH: OleVariant;
    crv: OleVariant;
  private
    mNamaToko: string;
    mAlamatToko: string;
    mTelponToko: string;
    mMysqlDumpPath: string;

    mNamaAplikasi: string;
    mKodeUser: string;
    mNamaUser: string;
    mJabatan: string;
    mEmailUser: string;
    mUserDept: string;
    mUserDivisi: string;
    mPassword: string;
    mGrupUser: string;
    mAppPath: string;
    mGroup: string;
    mTgl: TDate;
    mStatusTreod: string;
    mDBUser: string;
    mDBPassword: string;
    mCrConnection: string;
    mReportPath: string;
    mAppInfo: string;
    mIPAddress: string;
    mHostName: string;
    mIPServer: string;
    mDBName: string;

    // crystal report
    mCr_ReportFileName: string;
    mCr_SelectionFormula: string;
    mCr_WindowTitle: string;
    mCr_Formulas: TStrings;

    mDiskonOto: string;

    // jenis struk
    mStruk: string;

    // otorisasi edit harga
    mEditHargaOto: string;

    // Flag Cetak Langsung
    mCetakLangsung: boolean;

    // flag report modal
    mReportModal: boolean;

    bHeaderToko: boolean;

    bUsingKasir: boolean;

    mCashDrawer: boolean;

    mSkin: boolean;

    mTglStkAwal: TDateTime;

    // 14 08 2012
    mDSNName: string;

    mUbahTglTrs: Boolean;
    mEditTrans: Boolean;

    mDBHost: string;
    mServerSMTP: string;

    // 17-08-2014
    mUkuranSPK: string;

    mSusut: real;
    mConstGaji: real;
    mConstGajiPerHari: real;

    // 26-08-2015
    mCabang: string;

    //17-11-2015
    mVer: string;

    // kode barang trial
    mKodeBrgTrial: Integer;

    // wewenang gudang
    mLstWewenangGdg: TStringList;

    // notifikasi url
    mNotifikasiURL: String;

    mTrial: Boolean;
    mPOTmp: String;

    procedure SetNamaToko(value: string);
    function GetNamaToko: string;

    procedure SetAlamatToko(value: string);
    function GetAlamatToko: string;

    procedure SetTelponToko(value: string);
    function GetTelponToko: string;

    procedure SetMysqlDumpPath(value: string);
    function GetMysqlDumpPath: string;

    procedure SetNamaAplikasi(value: string);
    function GetNamaAplikasi: string;

    procedure SetKodeUser(value: string);
    function GetKodeUser: string;

    procedure SetNamaUser(value: string);
    function GetNamaUser: string;

    procedure SetPassword(value: string);
    function GetPassword: string;

    procedure SetGrupUser(value: string);
    function GetGrupUser: string;

    procedure SetAppPath(value: string);
    function GetAppPath: string;

    procedure SetTgl(date: TDate);
    function GetTgl: TDate;

    function GetStatusTreod: string;

    function GetTime: TDateTime;

    procedure SetDBUser(value: string);
    function GetDBUser: string;

    procedure SetDBPassword(value: string);
    function GetDBPassword: string;

    function GetCrConnection: string;

    procedure SetReportPath(value: string);
    function GetReportPath: string;

    procedure Cr_SetReportFileName(value: string);
    procedure Cr_SetSelectionFormula(value: string);
    procedure Cr_SetWindowTitle(value: string);
    procedure Cr_SetFormulas(value: TStrings);

    procedure SetAppInfo(value: string);
    function GetAppInfo: string;

    procedure SetIPAddress(value: string);
    function GetIPAddress: string;

    procedure SetIPServer(value: string);
    function GetIPServer: string;

    function GetHostName: string;

    procedure SetDiskonOto(sValue: string);
    function GetDiskonOto: string;

    procedure SetStruk(sValue: string);
    function GetStruk: string;

    // otorisasi edit harga
    function GetEditHargaOto: string;
    procedure SetEditHargaOto(sValue: string);

    // cetak langsung - 19 09 2011
    function GetCetakLangsung: boolean;
    procedure SetCetakLangsung(bValue: boolean);

    function GetReportModal: boolean;
    procedure SetReportModal(bValue: boolean);

    function RandomPassword(plen: integer): String;

  public
    version : string;
    debug : boolean;
    demo : boolean;
    constructor Create;

    property NamaToko: string read GetNamaToko write SetNamaToko;
    property AlamatToko: string read GetAlamatToko write SetAlamatToko;
    property TelponToko: string read GetTelponToko write SetTelponToko;
    property MysqlDumpPath: string read GetMysqlDumpPath write SetMysqlDumpPath;

    property NamaAplikasi: string read GetNamaAplikasi write SetNamaAplikasi;
    property KodeUser: string read GetKodeUser write SetKodeUser;
    property NamaUser: string read GetNamaUser write SetNamaUser;
    property Password: string read GetPassword write SetPassword;
    property GrupUser: string read GetGrupUser write SetGrupUser;
    property AppPath: string read GetAppPath write SetAppPath;
    property Tanggal: TDate read GetTgl write SetTgl;
    property StatusTreod: string read GetStatusTreod;
    property ServerTime: TDateTime read GetTime;
    property DBUser: string read GetDBUser write SetDBUser;
    property DBPassword: string read GetDBPassword write SetDBPassword;
    property CrConnection: string read GetCrConnection;
    property ReportPath: string read GetReportPath write SetReportPath;
    function GetMysqlTanggal: string;
    function TanggalServer: TDateTime;
    function TanggalString: String;
    function CheckTreod: string;
    function CheckEod : boolean;
    function CheckStokAwal: boolean;
    function JamString: string;

    property Cr_ReportFileName: string write Cr_SetReportFileName;
    property Cr_SelectionFormula: string write Cr_SetSelectionFormula;
    property Cr_WindowTitle: string write Cr_SetWindowTitle;
    property Cr_Formulas: TStrings write Cr_SetFormulas;

    procedure CrH_ClearFormula;
    procedure CrH_Print;

    property AppInfo: string read GetAppInfo write SetAppInfo;

    property IPAddress: string read GetIPAddress write SetIPAddress;
    property IPServer: string read GetIPServer write SetIPServer;
    property HostName: string read GetHostName;

    property DiskonOto: string read GetDiskonOto write SetDiskonOto;

    property Struk: string read GetStruk write SetStruk;

    procedure crv_preview;
    procedure crv_preview2;

    property EditHargaOto: string read GetEditHargaOto write SetEditHargaOto;

    // cetak langsung - 19 09 2011
    property CetakLangsung: boolean read GetCetakLangsung write SetCetakLangsung;

    property ReportModal: boolean read GetReportModal write SetReportModal;

    property HeaderToko: boolean write bHeaderToko;

    property UsingKasir: boolean read bUsingKasir write bUsingKasir;

    property CashDrawer: boolean read mCashDrawer write mCashDrawer;

    property Skin: boolean read mSkin write mSkin;

    property TglStkAwal: TDateTime read mTglStkAwal write mTglStkAwal;

    property DSNName: string read mDSNName write mDSNName;

    function NowServer: TDateTime;

    property UserDept: string read mUserDept write mUserDept;

    property UserDivisi: string read mUserDivisi write mUserDivisi;

    property UbahTglTrs: boolean read mUbahTglTrs write mUbahTglTrs;
    property EditTrans: boolean read mEditTrans write mEditTrans;

    property DBHost: string read mDBHost write mDBHost;

    property EmailUser: string read mEmailUser write mEmailUser;

    function GetWewenang(sWName: string): string;

    property DBName: string read mDBName write mDBName;

    property ServerSMTP: string read mServerSMTP write mServerSMTP;

    property Jabatan: string read mJabatan write mJabatan;

    property UkuranSPK: string read mUkuranSPK write mUkuranSPK;

    property Susut : real read mSusut write mSusut;
    property ConstGaji: Real read mConstGaji write mConstGaji;
    property ConstGajiPerHari : real read mConstGajiPerHari write mConstGajiPerHari;

    property Cabang : string read mCabang write mCabang;

    property Ver: string read mVer write mVer;

    property KodeBrgTrial: Integer read mKodeBrgTrial write mKodeBrgTrial;

    procedure log_(ev: string);

    property WewenangGudang: TStringList read mLstWewenangGdg write mLstWewenangGdg;

    property NotifikasiURL: string read mNotifikasiURL write mNotifikasiURL;

    property Trial: boolean read mTrial write mTrial;

    property POTmp: string read mPOTmp write mPOTmp;
  end;

implementation

uses unDM, unTools;

constructor TAplikasi.Create;
begin
  try
    {$DEFINE NDEMO}
    {$IFDEF DEMO}
    self.demo := false;
    self.version := self.version + ' - ( DEMO VERSION )';
    {$ELSE}
    Self.version := '[Ver.13.03.2018 - 14:12]';
    Self.Ver := '17112015_0902';
    self.demo := false;
    {$ENDIF}
    mSusut := 0.01;
    mConstGaji := 2720000 / 173;
    mConstGajiPerHari := mConstGaji * 7;

    mLstWewenangGdg := TStringList.Create;
    mNotifikasiURL := 'http://192.168.0.243/mda/index.php/main/send_notification/';
  except
  end;
end;

procedure TAplikasi.crv_preview;
var
  sTmp: string;
  i: integer;
  fFormulas: boolean;
begin
  // jika ada formula yang lain
  sTmp := '';
  if (mCr_Formulas <> nil) and
    (mCr_Formulas.Count > 0) then begin
      fFormulas := true;
      for i := 0 to mCr_Formulas.Count -1 do
        sTmp := sTmp + mCr_Formulas.Strings[i];
    end
    else 
      fFormulas := false;

  crv.UserName := aplikasi.DBUser;
  crv.Password := aplikasi.DBPassword;
  crv.TipeKoneksi := 'odbc';
  crv.ReportName := self.mCr_ReportFileName;
  crv.Caption := self.mCr_WindowTitle;
  crv.DSNName := 'mysql_pos_adv';
  crv.SelectionFormula := self.mCr_SelectionFormula;

  if fFormulas then
    crv.Formulas := 'nama_toko=' + QuotedTrim(mNamaToko) + ';' +
      'alamat_toko=' + QuotedTrim(mAlamatToko) + ';' +
      'telpon_toko=' + QuotedTrim(mTelponToko) + ';' +
      sTmp;

  if mReportModal then
    crv.ShowModal := 1
  else begin
    crv.ShowModal := 0;
    mReportModal := True;
  end;

  crv.ShowReport;
end;

procedure TAplikasi.SetEditHargaOto(sValue: string);
begin
  mEditHargaOto := sValue;
end;

function TAplikasi.GetEditHargaOto: string;
begin
  Result := mEditHargaOto;
end;

procedure TAplikasi.SetStruk(sValue: string);
begin
  mStruk := sValue;
end;

function TAplikasi.GetStruk: string;
begin
  Result := mStruk;
end;

procedure TAplikasi.SetDiskonOto(sValue: string);
begin
  mDiskonOto := sValue;
end;

function TAplikasi.GetDiskonOto: string;
begin
  Result := mDiskonOto;
end;

procedure TAplikasi.SetNamaToko(value: string);
begin
  mNamaToko := value;
end;

function TAplikasi.GetNamaToko: string;
begin
  Result := mNamaToko;
end;

procedure TAplikasi.SetAlamatToko(value: string);
begin
  mAlamatToko := value;
end;

function TAplikasi.GetAlamatToko: string;
begin
  Result := mAlamatToko;
end;

procedure TAplikasi.SetTelponToko(value: string);
begin
  mTelponToko := value;
end;

function TAplikasi.GetTelponToko: string;
begin
  Result := mTelponToko;
end;

procedure TAplikasi.SetMysqlDumpPath(value: string);
begin
  mMysqlDumpPath := value;
end;

function TAplikasi.GetMysqlDumpPath: string;
begin
  Result := mMysqlDumpPath;
end;

procedure TAplikasi.SetNamaAplikasi(value:string);
begin
  mNamaAplikasi := value;
end;

function TAplikasi.GetNamaAplikasi : string;
begin
  Result := mNamaAplikasi;
end;

procedure TAplikasi.SetKodeUser(value: string);
begin
  mKodeUser := value;
end;

function TAplikasi.GetKodeUser : string;
begin
  Result := mKodeUser;
end;

procedure TAplikasi.SetNamaUser(value: string);
begin
  mNamaUser := value;
end;

function TAplikasi.GetNamaUser: string;
begin
  Result := mNamaUser;
end;

procedure TAplikasi.SetPassword(value: string);
begin
  mPassword := value;
end;

function TAplikasi.GetPassword: string;
begin
  Result := mPassword;
end;

procedure TAplikasi.SetGrupUser(value: string);
begin
  mGrupUser := value;
end;

function TAplikasi.GetGrupUser;
begin
  Result := mGrupUser;
end;

procedure TAplikasi.SetAppPath(value:string);
begin
  mAppPath := value;
end;

function TAplikasi.GetAppPath: string;
begin
  Result := mAppPath;
end;

procedure TAplikasi.SetTgl(date: TDate);
begin
  mTgl := date;
end;

function TAplikasi.GetTgl: TDate;
begin
  Result := Self.TanggalServer;
end;

function TAplikasi.GetMysqlTanggal: string;
var
  q: TZQuery;
begin
  q := OpenRS('SELECT DATE(NOW()) AS tgl');
  Result := DateToMySqlDate(q.FieldByName('tgl').AsVariant);
  q.Close;
end;

function TAplikasi.GetStatusTreod: string;
begin
  Result := mStatusTreod;
end;

function TAplikasi.CheckTreod: string;
var
  tgl, maks_tgl: string;
  q: TZQuery;
begin

  q := TZQuery.Create(nil);
  q.Connection := dm.zConn;
  q.SQL.Text := 'SELECT IFNULL(MAX(tanggal),''1970-01-01'') AS maks_tgl FROM treod';
  q.Open;
  maks_tgl := q.FieldByName('maks_tgl').AsString;

  if q.FieldByName('maks_tgl').AsString <> '1970-01-01' then begin
    q.Close;
    q.SQL.Text := 'SELECT MAX(tanggal) as maks_tgl FROM treod';
    q.Open;
  end;

  if maks_tgl = '1970-01-01' then begin
    tgl := aplikasi.GetMysqlTanggal;
    q.Close;
    dm.zConn.ExecuteDirect('INSERT INTO treod SET tanggal = ''' + tgl + ''', status = ''F''');
    Result := '1';
  end
  else begin
    if q.FieldByName('maks_tgl').AsDateTime > GetTgl then
      Result := '1'
    else begin
      tgl := DateToMySqlDate(q.FieldByName('maks_tgl').AsDateTime);

      q.Close;
      q.SQL.Text := 'SELECT * FROM treod WHERE tanggal = ''' + tgl + '''';
      q.Open;
      self.mStatusTreod := q.FieldByName('status').AsString;
      Result := '0';

    end;
  end;

  if q.Active then q.Close;
end;

// untuk check apakah sudah stok awal hari ini
function TAplikasi.CheckStokAwal: Boolean;
var
  q: TZQuery;
  tmp: boolean;
begin
  tmp := False;

  q := OpenRS('SELECT COUNT(*) AS jum FROM history WHERE tanggal = ''' +
    GetMysqlTanggal + '''');
  if q.FieldByName('jum').AsInteger > 0 then
    tmp := True;

  q.Close;

  Result := tmp;
end;

function TAplikasi.GetTime : TDateTime;
var
  q: TZQuery;
begin
  q := OpenRS('SELECT TIME(NOW()) AS jam');
  Result := q.FieldByName('jam').AsDateTime;
  q.Close;
end;

procedure TAplikasi.SetDBUser(value:string);
begin
  mDBUser := value;
end;

function TAplikasi.GetDBUser: string;
begin
  Result := mDBUser;
end;

procedure TAplikasi.SetDBPassword(value:string);
begin
  mDBPassword := value;
end;

function TAplikasi.GetDBPassword: string;
begin
  Result := mDBPassword;
end;

function TAplikasi.GetCrConnection: string;
begin
  Result := 'DSN=;' +
    'UID=' + mDBUser + ';' +   
    'PWD=' + mDBPassword + ';' +
    'DSQ=';
end;

procedure TAplikasi.SetReportPath(value:string);
begin
  mReportPath := value;
end;

function TAplikasi.GetReportPath: string;
begin
  Result := mReportPath;
end;

procedure TAplikasi.Cr_SetReportFileName(value: string);
begin
  mCr_ReportFileName := value;
  bHeaderToko := false;
end;

procedure TAplikasi.Cr_SetSelectionFormula(value: string);
begin
  mCr_SelectionFormula := value;
end;

procedure TAplikasi.Cr_SetWindowTitle(value: string);
begin
  mCr_WindowTitle := value;
end;

procedure TAplikasi.Cr_SetFormulas(value: TStrings);
begin
  mCr_Formulas := value;
end;

procedure TAplikasi.CrH_ClearFormula;
begin
  if mCr_Formulas <> nil then
    if mCr_Formulas.Count > 0 then
      mCr_Formulas.Clear;

end;

procedure TAplikasi.CrH_Print;
var
  i: integer;
  sTmp: string;
begin
  // jika ada formula yang lain
  sTmp := '';
  if (mCr_Formulas <> nil) and
    (mCr_Formulas.Count > 0) then begin
      //mCr_Formulas.Clear; // clear formula sebelumnya
      for i := 0 to mCr_Formulas.Count -1 do
        sTmp := sTmp + mCr_Formulas.Strings[i];
    end;

  crH.ReportFileName := mCr_ReportFileName;
  crH.Formulas := '';
  crH.Formulas := 'nama_toko=' + QuotedTrim(mNamaToko) + ';' +
    'alamat_toko=' + QuotedTrim(mAlamatToko) + ';' +
    'telpon_toko=' + QuotedTrim(mTelponToko) + ';' +
    sTmp;

  crH.Koneksi := CrConnection;
  crH.SelectionFormula := mCr_SelectionFormula;
  crH.WindowTitle := mCr_WindowTitle;
  crH.Preview;
end;

procedure TAplikasi.SetAppInfo(value: string);
begin
  mAppInfo := value;
end;

function TAplikasi.GetAppInfo;
begin
  Result := mAppInfo;
end;

function TAplikasi.TanggalServer: TDateTime;
var
  q: TZQuery;
begin
  q := OpenRS('SELECT DATE(NOW()) AS tanggal');
  Result := q.FieldByName('tanggal').AsDateTime;
  q.Close;
end;

function TAplikasi.TanggalString: String;
var
  q: TZQuery;
begin
  q := OpenRS('SELECT DATE_FORMAT(DATE(NOW()), ''%Y-%m-%d'') AS tanggal');
  Result := q.FieldByName('tanggal').AsString;
  q.Close;
  q := nil;
end;

function TAplikasi.CheckEod : boolean;
var
  q : TZQuery;
begin
  q := OpenRS(Format('SELECT * FROM treod WHERE tanggal = ''%s''',
    [self.TanggalString]));
  if q.FieldByName('eod').AsString = 'T' then begin
    MsgBox('Transaksi tidak bisa dilakukan karena sudah EOD / Tutup toko.');
    Result := True;
  end
  else
    Result := False;
end;

procedure TAplikasi.SetIPAddress(value: string);
begin
  mIPAddress := value;
end;

function TAplikasi.GetIPAddress;
begin
  Result := mIPAddress;
end;

procedure TAplikasi.SetIPServer(value: string);
begin
  mIPServer := value;
end;

function TAplikasi.GetIPServer;
begin
  Result := mIPServer;
end;

function TAplikasi.GetHostName: string;
begin
  Result := UnTools.GetHostName2;
end;

procedure TAplikasi.SetCetakLangsung(bValue: boolean);
begin
  mCetakLangsung := bValue;
end;

function TAplikasi.GetCetakLangsung: boolean;
begin
  Result := mCetakLangsung;
end;

function TAplikasi.GetReportModal: boolean;
begin
  Result := mReportModal;
end;

procedure TAplikasi.SetReportModal(bValue: boolean);
begin
  mReportModal := bValue;
end;

procedure TAplikasi.crv_preview2;
var
  tbl: TZTable;
  sTmp, id, sFileBat: string;
  fFormulas: boolean;
  i: integer;
  F: TextFile;
begin
  sTmp := '';
  if (mCr_Formulas <> nil) and
    (mCr_Formulas.Count > 0) then begin
    fFormulas := true;
    for i := 0 to mCr_Formulas.Count -1 do
      sTmp := sTmp + mCr_Formulas.Strings[i];
    end
  else
    fFormulas := false;

  id := FormatDateTime('ddmmyyyyhhmmss', Now) + '-' +
    RandomPassword(10);

  tbl := unTools.OpenTbl('tmp_cetak');

  tbl.Insert;
  tbl.FieldByName('id').AsString := id;
  tbl.FieldByName('username').AsString := aplikasi.DBUser;
  tbl.FieldByName('password').AsString := aplikasi.DBPassword;
  tbl.FieldByName('tipekoneksi').AsString := 'odbc';
  tbl.FieldByName('selectionformula').AsString := self.mCr_SelectionFormula;
  tbl.FieldByName('reportname').AsString := self.mCr_ReportFileName;
  tbl.FieldByName('caption').AsString := self.mCr_WindowTitle;
  tbl.FieldByName('dsnname').AsString := Aplikasi.DSNName;

  if fFormulas then
    tbl.FieldByName('formulas').AsString := 'nama_toko=' + QuotedTrim(mNamaToko) + ';' +
      'alamat_toko=' + QuotedTrim(mAlamatToko) + ';' +
      'telpon_toko=' + QuotedTrim(mTelponToko) + ';' +
      sTmp;

  if fFormulas = false then
    if bHeaderToko then
      tbl.FieldByName('formulas').AsString := 'nama_toko=' + QuotedTrim(mNamaToko) + ';' +
        'alamat_toko=' + QuotedTrim(mAlamatToko) + ';' +
        'telpon_toko=' + QuotedTrim(mTelponToko) + ';' +
        sTmp;

  tbl.Post;

  tbl.Close;

  sFileBat := self.AppPath + id + '.bat';
  if FileExists(sFileBat) then
    DeleteFile(PChar(sFileBat));
  AssignFile(F, sFileBat);
  Rewrite(F);
  Writeln(F, '"' + self.AppPath + 'crviewer.exe" ' + id);
  Writeln(F, 'del "' + self.AppPath + id + '.bat"');
  CloseFile(F);

  WinExec(PAnsiChar(sFileBat),0);
end;

function TAplikasi.JamString: string;
var
  q: TZQuery;
begin
  q := OpenRS('SELECT DATE_FORMAT(NOW(),''%H:%i:%s'') AS jam');
  Result := q.FieldByName('jam').AsString;
  q.Close;
end;

function TAplikasi.RandomPassword(plen: integer): String;
var
  str:String;
begin
  Randomize;
  str:='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
  Result:='';
  repeat
    Result:=Result+str[Random(Length(str))+1];
  until(Length(Result)=PLen)
end;

function TAplikasi.NowServer: TDateTime;
var
  q: TZQuery;
begin
  q := OpenRS('SELECT NOW() AS skrg');
  Result := q.FieldByName('skrg').AsDateTime;
  q.Close;
end;

function TAplikasi.GetWewenang(sWName: string): string;
var
  q: TZQuery;
begin
  q := OpenRS('SELECT * FROM tbl_wewenang WHERE nama = ''%s'' ' +
    'AND nm_comp = ''%s''',
    [Aplikasi.NamaUser, sWName]);
  if q.IsEmpty then
    Result := '0'
  else
    Result := q.FieldByName('wwn').AsString;
  q.Close;
end;

procedure TAplikasi.log_(ev: string);
begin
  try
  dm.zConn.ExecuteDirect('INSERT INTO tbl_log ' +
    'SET host = ''' + unTools.GetHostName2 + ''', ' +
    'user = ''' + Aplikasi.NamaUser + ''', ' +
    'f_mda = ''1'', ' +
    'versi = ''' + Self.Version + ''', ' +
    'tgljam = NOW(), ' +
    'event = ''' + ev + '''');
  except
  end;
end;

end.
